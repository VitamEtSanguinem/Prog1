<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            
 1.) 
int main(){
 while(1) {

            }
            };
                                               


 2.)  
int main(){
 while(1) {

sleep();
};

}
            
            
 3.)
            
#include <omp.h>

int main(){

#pragma omp parallel

 while(1) {


};

}
        </para>
        <para>
1.) Amely egy magot 100%-osan kihasznál:

		A "vegtelen_100.c" forráskód egy a while ciklusba foglalt logikai érték "[while(1)]" --mely a 'true' érték -- sorozatosan le fog futni egészen a program terminálásáig , hiszen folyamatosan igaz értéke lesz.

2.) Amely egy magot 0%-osan használ ki:

		Ebben az esetben a "sleep()" utasítással próbálkoztam a "while(1){};" cikluson belül,amely futtatáskor a várt 0%-os kihasználtságot eredményezte.

3.)Amely minden magot 100%-osan kihasznál:

		A "vegtelen_a.c" forráskódba beillesztett <omp.h> könyvtár, és az abból előhívott #pragma omp parallel a több szálon való futtatást teszi lehetővé, majd az így előállított kódot a terminálban a kövezkezőképp fordítottam : "gcc -o vegtelen_all.c -fopenmp vegtelen_a.c". 
		Az így kapott "vegtelen_all.c"-t lefuttatva jön létre az összes magot kihasználó process.

        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
           A T1000 ha lefagy, akkor az őt vizsgáló program nem fagy le, és igaz logikai értékkel tér vissza.
           Amennyiben T1000 nem fagy le, az "őt" vizsgáló program fog lefagyni.
           Ellentmondást kapunk , azzal a konklúzióval hogy ilyen program nem létezik.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: 

#include <stdio.h>



int a= 13;
int b= 9;

int main(){


printf("%d\n", a);
printf("%d\n", b);



a=a+b;
b=a-b;
a=a-b;


printf("%d\n", a);
printf("%d\n", b);


}
        </para>
        <para>
Ehhez a feladathoz elegendő az <stdio.h> headert társítanunk forráskódunkhoz.
Deklarálunk két integer típusú változót, majd ezeket kiíratjuk a printf() segítségével.
A kiírás után szimpla matematikai műveletek elvégzése, majd a változók ismételt kiíratása után látjuk hogy az előszor kííratott "int a" értékét most "int b" vette fel, s ez fordítva.
Ezzel a változó érték felcserélés feladatunk kész is.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása: 
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int
main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );

        mvprintw ( y, x, "O" );

        refresh ();
        usleep ( 100000 ); 

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
            xnov = xnov * -1;
        }
        if ( x<=0 ) { // elerte-e a bal oldalt?
            xnov = xnov * -1;
        }
        if ( y<=0 ) { // elerte-e a tetejet?
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { // elerte-e a aljat?
            ynov = ynov * -1;
        }

    }

    return 0;
}
        </para>
        <para>
A labdapattogás nevezetű C program elején, az "include" szekcióban már találhatunk említésre méltó információt, amely nem más, mint a <curses.h> header.
Ez a header a képernyő használatért illetve az optimalizációért felelős.

A programunk -lncurses kapcsolót igényel a fordításhoz, illetve a futtatáshoz is.
Futtatáskor a "labdapattogás" nevű program a linux terminálablakában 'O'-kat (ez a labda) ír, majd ha eléri a terminálablak szélét egy adott szögben újra "elindul" , s így tovább.


Kicsit részletesebben:
A program a terminálablakot egy koordináta rendszerként kezeli, ahol a 0, 0 pont a terminálunk bal felső sarka, így hát innen fog indulni az 'O'.
Egy screen refresh után a forráskódban deklarált xnov, illetve ynov értékével megnöveljük az előbb kiírt 'O' koordinátáit, ezzel "elmozdul", mindez addig folytatódik míg a fentiek szerint el nem éri a terminálablak egy oldalát, ezesetben például ha az xnov-ot tekintjük "xnov = xnov * -1;", a labdánk így lesz "visszafordítva".(természetesen míg nem ütközik ismét terminál ablakunk szélébe)
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
             
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link> 
#include<iostream>
int main (){

int a;
int n;
a=1;
while(a != 0) {
a<<=1;
n++;

}
std::cout<< n <<std::endl;
}
        </para>
        <para>
Ehhez a feladathoz a bitshift operátort hívtam segítségül, melynek kikötöttem , hogy az adott "szó" karakterein(binárisan) egyesével lépkedjen végig, mindezt egy változóban tárolva (minden "bit-lépés"-t követően növelje az ennek tárolására létrehozott változó értékét).
Majd a végén ezen változó értékének kiíratására kerül sor.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Avagy Page Rank.
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>
#include <stdio.h>
#include <math.h>

void
kiir (double tomb[], int db){
	
	int i;
	
	for (i=0; i<db; ++i){
		printf("%f\n",tomb[i]);
	}
}

double
tavolsag (double PR[], double PRv[], int n){
	
	int i;
	double osszeg=0;
	
	for (i = 0; i < n; ++i)
		osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
	
	return sqrt(osszeg);
}

void
pagerank(double T[4][4]){
	double PR[4] = { 0.0, 0.0, 0.0, 0.0 }; //ebbe megy az eredmény
	double PRv[4] = { 1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0}; //ezzel szorzok
	
	int i, j;
	
	for(;;){
		
		// ide jön a mátrix művelet		
		
		for (i=0; i<4; i++){
			PR[i]=0.0;
			for (j=0; j<4; j++){
				PR[i] = PR[i] + T[i][j]*PRv[j];
			}
		}
	
			if (tavolsag(PR,PRv,4) < 0.0000000001) 
				break;
		
		// ide meg az átpakolás PR-ből PRv-be
			
			for (i=0;i<4; i++){
				PRv[i]=PR[i];
			}	
	}
	
	kiir (PR, 4);
}

int main (void){
	double L[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  1.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};	
	
	double L1[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  0.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};
	
	double L2[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  0.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  1.0}
	};
	
	printf("\nAz eredeti mátrix értékeivel történő futás:\n");
	pagerank(L);
	
	printf("\nAmikor az egyik oldal semmire sem mutat:\n");
	pagerank(L1);
	
	printf("\nAmikor az egyik oldal csak magára mutat:\n");
	pagerank(L2);
	
	printf("\n");

	return 0;
}

        </para>
        <para>
Működési elv: egy adott honlap pagerank értéke a rá mutató/hivatkozó egyes honlapok függvénye. Egy adott 'A' honlap page rankja például ha egy 'B' honlap hivatkozik rá, illetve egy adott 'C'-re is osztandó a 'B' honlapból kimenő linkek számával.(Hiszen 'B' hivatkozik 'A'-ra és 'C'-re is, viszont 'A' és 'C' ilyen tekintetben függetlenek.)
Ez a program egyes weboldalak népszerűségét hivatott kiszámolni , melyeket double értékek reprezentálnak.
A program elején függvénydeklarációkat láthatunk, kiir, tavolsag, pagerank.
Mit is csinálnak ezek?

kiir : Egy adott tömb 'i'-edik elemeit írja ki, mely a for ciklus miatt a 'db' értékig növekszenek.


tavolsag : Ez gyakorlatilag felfogható a matematikában használt "két pont távolságának", a double osszeg, folyamatosan a PR[]^2 - PRv[]^2 -tel növekszik, egészen az 'n' értékig. Mindezek után az egész "osszeg" -ből négyzetgyököt vonunk.


pagerank : Paraméterként egy 2 dimenziós mátrixot, egy üres oszlopvektort, illetve egy kiinduló egydimenziós mátrixot, melynek elemei 1/4-es értéket kapnak (a 2 dimenziós T[4][4] miatt)---ezzel történik majd a szorzás---

Ebben a függvényben kerül sor a mátrixművelet elvégzésére.
Először is egy for ciklussal kinullázzuk az (eredmény) oszlopvektorunk értékeit (ez a későbbiekben lesz fontos, ugyanis több weboldal page rankjának számítását fogjuk végezni, mely során bent maradhatnak értékek), majd az előbb kinullázott értékek helyére egy újabb for ciklussal kiszámoljuk a pagerank értéket a következőképp: egy adott PR[i] értékhez hozzáadjuk  a T[i][j]*PRv[j] szorzatot, majd ezt eltároljuk a PR[i]-ben, vagyis PR[i] felveszi az imént említett szorzat értékét(ez jelen esetben egy 4-gyel való osztást jelent).

        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
         
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")

        </para>
        <para>
 A Brun-tétel az ikerprímeket vizsgálja, valamint ezen ikerprímek reciprokösszegét.

A forráskódunkban először a 'matlab' library-t pillanthatjuk meg, melynek funkciói ezen tétel formalizálását segítik.
Rögtön a 'matlab' könyvtár "beszúrása" után egy függvény deklarációval találjuk magunkat szemben.

az 'stp' függvényünket a következő sorok építik fel : 
   


    primes = primes(x) 			<-----Itt a primes funkció látható, 'x'-ig írja ki a prímszámokat ('x' egy a funkció által kapott paraméter).



    diff = primes[2:length(primes)]-primes[1:length(primes)-1]   	 <------ Ebben a sorban 2 vektort láthatunk, melyből az első a korábban felírt "primes" vektor második elemétől kezdődően fogja tartalmazni a prímeket, a második vektorunk a "primes" vektor első elemétől az utolsó előttiig tartalmazza a prímszámokat, mindezek után ezek különbségét vesszük, majd eltároljuk a "diff"-ben.



    idx = which(diff==2)	<---- Ezen sor a vektorunk azon helyeit fogja meghatározni, ahol a 2 vektor elemeinek különbsége 2 lesz (ikerprím kritérium).
    t1primes = primes[idx]	<---- Az ikerprímek első tagját tartalmazó vektor.
    t2primes = primes[idx]+2	<---- Az ikerprímek második tagját tartalmazó vektor.
    rt1plust2 = 1/t1primes+1/t2primes	<---- Az egyes párok reciprokainak összege.
    return(sum(rt1plust2))		<---- A részösszegek összege, azaz a ikerprímek reciprokösszege.

Ezek után az eddig leírtak (azaz az 'stp' függvény) plotoltatására, azaz kirajzoltatására kerül sor.
        </para>    
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
       
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
#   An illustration written in R for the Monty Hall Problem 
#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>
#
#   https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan
# 

kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
        </para>
        <para>
Egy Monty Hall által vezetett műsorról van szó.
A játék során a versenyző 3 ajtó közül választ, a 3 ajtóból 1 mögött egy autó áll, 2 mögött pedig "értéktelen" nyeremények.
Amint a játékos választ a 3 lehetőség közül, amint ez megtörténik, a műsorvezető megmutat egyet a maradék 2 lehetőség közül (természetesen egyet az értéktelenek közül).
Mindezek után felkínálja a lehetőséget a cserére (a 2 meg nem mutatott nyeremény közül, 1.: a játékos által először választott ajtó, 3.: a meg nem mutatott ajtó [ a 2. mögött értéktelen nyeremény rejlett]).
A nyerő(bb) stratégia itt a csere.
Hisz a legelején 1:3 az esély a nagy értékű nyeremény kiválasztására, míg a ki nem választott ajtóknál 2:3, miután a 2 ajtóból az egyik nyereményt megmutatják, így ez a 2:3 érték egy ajtóra sűrűsödik.
Így a programban látott 10000000 próbálkozásból a döntésüket megváltoztatók ~2/3 -os arányban nyernek a döntésüket meg nem változtatókkal szemben.
        </para>
    </section>

</chapter>                
